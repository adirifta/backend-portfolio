name: Deploy Portfolio Backend ke cPanel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: "portfolio-backend"
  CPANEL_PATH: "/home/username/public_html/portfolio"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install Dependencies
        run: |
          go mod download
          go mod verify

      - name: Run Tests
        run: |
          go test -v ./... -race

      - name: Build Application
        run: |
          go build -o ${{ env.APP_NAME }} ./cmd/api
          ls -la ${{ env.APP_NAME }}

  deploy:
    name: Deploy ke cPanel
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build Go Application
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ${{ env.APP_NAME }} ./cmd/api
          ls -la ${{ env.APP_NAME }}
          du -h ${{ env.APP_NAME }}

      - name: Create Production Environment File
        run: |
          cat > .env.production << EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=8080
          GIN_MODE=release
          APP_ENV=production
          EOF
          cat .env.production

      - name: Create Deployment Script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üöÄ Starting deployment process..."
          
          # Variables
          APP_NAME="portfolio-backend"
          DEPLOY_PATH="/home/$CPANEL_USER/public_html/portfolio"
          BACKUP_PATH="/home/$CPANEL_USER/backups"
          
          # Create backup directory
          mkdir -p $BACKUP_PATH
          
          # Backup current version if exists
          if [ -f "$DEPLOY_PATH/$APP_NAME" ]; then
            echo "üì¶ Creating backup of current version..."
            BACKUP_FILE="$BACKUP_PATH/${APP_NAME}-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
            tar -czf $BACKUP_FILE -C $DEPLOY_PATH .
            echo "‚úÖ Backup created: $BACKUP_FILE"
          fi
          
          # Stop running application
          echo "üõë Stopping current application..."
          pkill -f $APP_NAME || echo "No running process found"
          
          # Wait for process to stop
          sleep 3
          
          # Clean deployment directory
          echo "üßπ Cleaning deployment directory..."
          rm -rf $DEPLOY_PATH/*
          
          # Copy new files
          echo "üìÅ Copying new application..."
          cp $APP_NAME .env.production $DEPLOY_PATH/
          chmod +x $DEPLOY_PATH/$APP_NAME
          
          # Create startup script
          cat > $DEPLOY_PATH/start-app.sh << 'SCRIPTEOF'
          #!/bin/bash
          cd /home/$CPANEL_USER/public_html/portfolio
          export $(cat .env.production | xargs)
          nohup ./portfolio-backend > app.log 2>&1 &
          echo $! > app.pid
          SCRIPTEOF
          
          chmod +x $DEPLOY_PATH/start-app.sh
          
          # Start application
          echo "üéØ Starting application..."
          cd $DEPLOY_PATH
          ./start-app.sh
          
          # Wait for application to start
          sleep 5
          
          # Check if application is running
          if pgrep -f $APP_NAME > /dev/null; then
            echo "‚úÖ Application started successfully!"
          else
            echo "‚ùå Application failed to start!"
            exit 1
          fi
          
          # Health check
          echo "üè• Performing health check..."
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed!"
            exit 1
          fi
          
          echo "üéâ Deployment completed successfully!"
          EOF
          
          chmod +x deploy.sh
          cat deploy.sh

      - name: Deploy ke cPanel via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CPANEL_HOST }}
          username: ${{ secrets.CPANEL_USERNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          port: 22
          script_timeout: 300s
          script: |
            # Set environment variables for deployment script
            export CPANEL_USER="${{ secrets.CPANEL_USERNAME }}"
            
            # Create necessary directories
            mkdir -p /home/$CPANEL_USER/public_html/portfolio
            mkdir -p /home/$CPANEL_USER/backups
            
            # Check current disk space
            df -h /home/$CPANEL_USER

      - name: Upload Application Files
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.CPANEL_HOST }}
          username: ${{ secrets.CPANEL_USERNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          port: 22
          source: "portfolio-backend, .env.production, deploy.sh"
          target: "/home/${{ secrets.CPANEL_USERNAME }}/"

      - name: Execute Deployment Script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CPANEL_HOST }}
          username: ${{ secrets.CPANEL_USERNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          port: 22
          script_timeout: 300s
          script: |
            cd /home/${{ secrets.CPANEL_USERNAME }}
            chmod +x deploy.sh
            ./deploy.sh

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CPANEL_HOST }}
          username: ${{ secrets.CPANEL_USERNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          port: 22
          script: |
            echo "üîç Deployment Verification"
            echo "=========================="
            
            # Check if application is running
            echo "1. Checking running processes:"
            pgrep -f portfolio-backend && echo "‚úÖ Application is running" || echo "‚ùå Application not running"
            
            # Check application logs
            echo "2. Application logs (last 10 lines):"
            tail -10 /home/${{ secrets.CPANEL_USERNAME }}/public_html/portfolio/app.log || echo "No log file yet"
            
            # Check disk usage
            echo "3. Disk usage:"
            du -sh /home/${{ secrets.CPANEL_USERNAME }}/public_html/portfolio/*
            
            # Check port usage
            echo "4. Port 8080 usage:"
            netstat -tlnp | grep :8080 || echo "Port 8080 not in use"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Application URL: https://portfolio.your-domain.com"
          else
            echo "‚ùå Deployment failed!"
            echo "Check the deployment logs for details"
          fi